#!/usr/bin/env node

// Module dependencies.
const http = require('http');
const app = require('../app');

/**
 * @description Normalizes a port into a number, string, or false.
 * @param {number} val
 */
function normalizePort(val) {
  const portVal = parseInt(val, 10);

  if (Number.isNaN(portVal)) {
    // named pipe
    return val;
  }

  if (portVal >= 0) {
    // port number
    return portVal;
  }

  return false;
}

/**
 * @description Listens for HTTP server "error" event.
 * @param {Object} error
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;

    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;

    default:
      throw error;
  }
}

/**
 * @description Listens for HTTP server "listening" event.
 */
function onListening() {
  console.log(`Listening on ${process.env.MENDREK_API_DOMAIN}${process.env.MENDREK_API_PATH}`);
}

// Get port from environment and store in Express.
const port = normalizePort(process.env.MENDREK_API_PORT);
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
